import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import { collection, getDocs, getFirestore } from "firebase/firestore";
import { app } from "@/firebase";
import { useEffect, useState } from "react";
import {
  Group,
  Card,
  Text,
  Flex,
  Container,
  createStyles,
  Skeleton,
} from "@mantine/core";
import { IconPlus } from "@tabler/icons";

const inter = Inter({ subsets: ["latin"] });

type Blog = {
  title: string;
  key: string;
  description: string;
  codeBlocks: {
    language: string;
    code: string;
  }[];
};

export const useStyles = createStyles((theme) => ({
  link: {
    textDecoration: "none",
  },
}));

export default function Home() {
  // get list of blogs from firestore

  const [blogs, setBlogs] = useState<Blog[]>([]);
  const { classes, cx } = useStyles();

  useEffect(() => {
    const db = getFirestore(app);
    const blogRef = collection(db, "blogs");
    getDocs(blogRef).then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        // extract data from doc.data()
        const data = doc.data();
        console.log("data", data);
        const blog = {
          title: data.title,
          key: data.key,
          description: data.description,
          codeBlocks: data.codeBlocks,
        };
        setBlogs((prev) => [...prev, blog]);
      });
      setBlogs((prev) => {
        const unique = prev.filter(
          (blog, index, self) =>
            index === self.findIndex((t) => t.title === blog.title)
        );
        return unique;
      });
    });
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Flex
          style={{
            flexWrap: "wrap",
          }}
          gap="sm"
          align="center"
          mt="xl"
        >
          {blogs.map((blog) => (
            <Link
              key={blog.key}
              href={{
                pathname: `/blog/${blog.key}`,
                query: {
                  blog: JSON.stringify(blog),
                },
              }}
              className={classes.link}
            >
              <Card
                withBorder
                w="250px"
                h="250px"
                style={{
                  cursor: "pointer",
                }}
                shadow="sm"
              >
                <Text
                  fz="xl"
                  weight={600}
                  lineClamp={2}
                  mb="lg"
                  style={{
                    textDecoration: "none !important",
                  }}
                  td="none"
                >
                  {blog.title}
                </Text>
                <Text
                  lineClamp={5}
                  style={{
                    textDecoration: "none",
                  }}
                >
                  {blog.description}
                </Text>
              </Card>
            </Link>
          ))}

          {blogs.length == 0 && <Skeleton height={250} width={250} />}
          {blogs.length == 0 && <Skeleton height={250} width={250} />}
          {blogs.length == 0 && <Skeleton height={250} width={250} />}

          <Link href="/create">
            <Card
              withBorder
              w="250px"
              h="250px"
              style={{
                cursor: "pointer",
              }}
            >
              <Flex justify="center" align="center" h="100%">
                <IconPlus size={50} />
              </Flex>
            </Card>
          </Link>
        </Flex>
      </main>
    </>
  );
}
